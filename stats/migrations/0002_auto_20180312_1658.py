# Generated by Django 2.0.3 on 2018-03-12 16:58

from django.db import migrations
from django.utils.dateparse import parse_datetime
import os
import csv
import time


class Migration(migrations.Migration):


    def load_data(apps, schema_editor):
        start_time = time.time()

        EVENTS = 'events.csv'
        PERSONS = 'persons.csv'
        Device = apps.get_model('stats', 'Device')
        Content = apps.get_model('stats', 'Content')
        Event = apps.get_model('stats', 'Event')
        Person = apps.get_model('stats', 'Person')

        dirname = os.path.dirname(os.path.abspath(__file__))
        rows = []
        with open(os.path.join(dirname, EVENTS), newline='') as f:
            reader = csv.reader(f, delimiter=',')
            for row in reader:
                rows.append(row)

        # Create content instances
        content_ids = list(set([int(x[0]) for x in rows]))
        contents = {i:Content.objects.create(pk=i) for i in content_ids}
        print()
        print('  ' + '*'*80)
        print('  Contents was created, total: {}'.format(len(contents)))
        print('  ' + '*'*80)
        device_ids = list(set([int(x[1]) for x in rows]))
        devices = {i:Device.objects.create(pk=i) for i in device_ids}
        print()
        print('  ' + '*'*80)
        print('  Devices was created, total: {}'.format(len(devices)))
        print('  ' + '*'*80)
        # Create events instances
        events = [Event.objects.create(
                    content=contents[int(row[0])],
                    device=devices[int(row[1])],
                    event_type=row[2],
                    event_time=parse_datetime(row[3])
                ) for row in rows]
        print()
        print('  ' + '*'*80)
        print('  Events was created, total: {}'.format(len(events)))
        print('  ' + '*'*80)

        rows=[]
        with open(os.path.join(dirname, PERSONS), newline='') as f:
            reader = csv.reader(f, delimiter=',')
            for row in reader:
                rows.append(row)

        device_ids = list(set([int(x[0]) for x in rows]))
        new_devices = {i:Device.objects.create(pk=i) for i in device_ids if i > 3}
        for k, v in new_devices.items():
            devices[k] = v

        # Create persons instances
        persons = [Person.objects.create(
                    device=devices[int(row[0])],
                    appears=parse_datetime(row[1]),
                    disappears=parse_datetime(row[2]),
                    age=int(row[3]),
                    gender=row[4]) for row in rows]
        print()
        print('  ' + '*'*80)
        print('  Persons was created, total: {}'.format(len(persons)))
        print('  ' + '*'*80)
        print("  -- Executed in {} seconds ---".format(time.time()-start_time))



    dependencies = [
        ('stats', '0001_initial'),
    ]

    env = os.environ['ENV']

    operations = []
    if env != 'TEST':
        operations.append(migrations.RunPython(load_data))
